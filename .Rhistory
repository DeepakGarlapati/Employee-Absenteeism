}
calculate_Missing_Values_Percentage(data)
calculate_Missing_Values_Percentage(data_tmp = data)
#Performing missing value analysis on duplicate data to avoid information loss in original datset.
data_tmp1 = data
calculate_Missing_Values_Percentage <- function(data_tmp)
{
table(is.na(data_tmp)) #Inference: There are 135 missing values in the data
#Create DataFrame with missing percentage
missing_val = data.frame(apply(data_tmp,2,function(x){sum(is.na(x))}))
#Converting row names into Column names
missing_val$columns =  row.names(missing_val)
row.names(missing_val) = NULL
#Renaming columns
names(missing_val)[0] = "Columns"
names(missing_val)[1] = "Missing_Percentage"
#Calculating missing value percentage
missing_val$Missing_Percentage = (missing_val$Missing_Percentage/nrow(data_tmp)) * 100
#Arrange them in descending order
missing_val = missing_val[order(-missing_val$Missing_Percentage),]
#Rearranging the columns
missing_val = missing_val[,c(2,1)]
#Saving output results into a file
write.csv(missing_val, "Missing_percent.csv", row.names = F)
}
calculate_Missing_Values_Percentage(data_tmp = data)
calculate_Missing_Values_Percentage(data_tmp = data)
calculate_Missing_Values_Percentage(data)
#Performing imputation of missing values on duplicate data to preserve original data.
data_tmp = data
rm(data_tmp1)
#Imputing with KNN
data_tmp = knnImputation(data_tmp,k=3)
#Cross check for the total number of missing values
sum(is.na(data_tmp))
#Total no of duplicated rows in data_tmp
sum(duplicated(data_tmp))
#Removing duplicates from our data set
data_tmp = unique(data_tmp)
#Writing changes to our original data
data = data_tmp
#Categorising continuos variables and categorical variables
num_vars = c('Transportation expense','Distance from Residence to Work','Service time','Age','Work load Average/day',
'Hit target','Height','Weight','Body mass index','Absenteeism time in hours')
cat_vars = colnames(data[ ,-which(colnames(data) %in% num_vars)])
View(data)
View(data)
################ PCA Visualisation of data ###################
library(ggfortify)
autoplot(prcomp(data), data = data, colour = 'Absenteeism_time_in_hours')
as.numeric(sub(",", "", data1$`Work load Average/day`, fixed = TRUE))
str(data)
#Histograms of all variables
ggplot() + geom_histogram(aes(x = data$ID),data=data)
ggplot() + geom_histogram(aes(x = data$`Reason for absence`),data=data)
ggplot() + geom_histogram(aes(x = data$`Month of absence`),data=data)
ggplot() + geom_histogram(aes(x = data$`Day of the week`),data=data)
ggplot() + geom_histogram(aes(x = data$Seasons),data=data)
ggplot() + geom_histogram(aes(x = data$`Distance from Residence to Work`),data=data)
ggplot() + geom_histogram(aes(x = data$`Service time`),data=data)
ggplot() + geom_histogram(aes(x = data$`Transportation expense`),data=data)
plot(data$`Work load Average/day`)
ggplot() + geom_histogram(aes(x = data$`Disciplinary failure`),data=data)
ggplot() + geom_histogram(aes(x = data$Education),data=data)
ggplot() + geom_histogram(aes(x = data$Age),data=data)
ggplot() + geom_histogram(aes(x = data$`Hit target`),data=data)
ggplot() + geom_histogram(aes(x = data$Son),data=data)
ggplot() + geom_histogram(aes(x = data$`Social drinker`),data=data)
ggplot() + geom_histogram(aes(x = data$`Social smoker`),data=data)
ggplot() + geom_histogram(aes(x = data$Pet),data=data)
ggplot() + geom_histogram(aes(x = data$Weight),data=data)
ggplot() + geom_histogram(aes(x = data$Height),data=data)
ggplot() + geom_histogram(aes(x = data$`Absenteeism time in hours`),data=data)
#Box-Plot for data
boxplot(data[,c("ID", "Reason for absence","Month of absence","Day of the week","Seasons","Transportation expense","Distance from Residence to Work")])
boxplot(data[,c("Service time", "Age","Work load Average/day","Hit target","Disciplinary failure" ,"Education" ,"Son")])
ggplot() + geom_histogram(aes(x = data$`Body mass index`),data=data)
#Box-Plot for data
boxplot(data[,c("ID", "Reason for absence","Month of absence","Day of the week","Seasons","Transportation expense","Distance from Residence to Work")])
boxplot(data[,c("Service time", "Age","Work load Average/day","Hit target","Disciplinary failure" ,"Education" ,"Son")])
boxplot(data[,c("Social drinker","Social smoker","Pet", "Weight", "Height", "Body mass index","Absenteeism time in hours")])
ggplot(data,aes(x=data$ID,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('ID') + ylab('Absenteeism time in hours') + ggtitle("ID vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Reason for absence`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Reason for absence') + ylab('Absenteeism time in hours') + ggtitle("Reason for absence vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Month of absence`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Month of absence') + ylab('Absenteeism time in hours') + ggtitle("Month of absence vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Day of the week`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Day of the week') + ylab('Absenteeism time in hours') + ggtitle("Day of the week vs Absenteeism time in hours")
ggplot(data,aes(x=data$Seasons,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Seasons') + ylab('Absenteeism time in hours') + ggtitle("Seasons vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Transportation expense`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Transportation expense') + ylab('Absenteeism time in hours') + ggtitle("Transportation expense vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Service time`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Service time') + ylab('Absenteeism time in hours') + ggtitle("Service time vs Absenteeism time in hours")
ggplot(data,aes(x=data$Age,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Age') + ylab('Absenteeism time in hours') + ggtitle("Age vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Work load Average/day`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Work load Average/day') + ylab('Absenteeism time in hours') + ggtitle("Work load Average/day vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Hit target`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Hit target') + ylab('Absenteeism time in hours') + ggtitle("Hit target vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Disciplinary failure`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Disciplinary failure') + ylab('Absenteeism time in hours') + ggtitle("Disciplinary failure vs Absenteeism time in hours")
ggplot(data,aes(x=data$Education,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Education') + ylab('Absenteeism time in hours') + ggtitle("Education vs Absenteeism time in hours")
ggplot(data,aes(x=data$Son,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Son') + ylab('Absenteeism time in hours') + ggtitle("Son vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Social drinker`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Social drinker') + ylab('Absenteeism time in hours') + ggtitle("Social drinker vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Social smoker`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Social smoker') + ylab('Absenteeism time in hours') + ggtitle("Social smoker vs Absenteeism time in hours")
ggplot(data,aes(x=data$Pet,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Pet') + ylab('Absenteeism time in hours') + ggtitle("Pet vs Absenteeism time in hours")
ggplot(data,aes(x=data$Weight,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Weight') + ylab('Absenteeism time in hours') + ggtitle("Weight vs Absenteeism time in hours")
ggplot(data,aes(x=data$Height,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Height') + ylab('Absenteeism time in hours') + ggtitle("Height vs Absenteeism time in hours")
ggplot(data,aes(x=data$`Body mass index`,y=data$`Absenteeism time in hours`))+
geom_point(stat = "identity") + xlab('Body mass index') + ylab('Absenteeism time in hours') + ggtitle("Body mass index vs Absenteeism time in hours")
data1$`Work load Average/day` = as.numeric(sub(",", "", data1$`Work load Average/day`, fixed = TRUE))
data1 = data
data1$`Work load Average/day` = as.numeric(sub(",", "", data1$`Work load Average/day`, fixed = TRUE))
str(data1)
################ PCA Visualisation of data ###################
library(ggfortify)
autoplot(prcomp(data1), data = data1, colour = 'Absenteeism_time_in_hours')
autoplot(prcomp(data), data = data, colour = 'Absenteeism time in hours')
autoplot(prcomp(data1), data = data1, colour = 'Absenteeism time in hours')
autoplot(prcomp(data1), data = data1, colour = shQuote('Absenteeism time in hours'))
autoplot(prcomp(data1), data = data1, colour = ('Absenteeism time in hours'))
autoplot(prcomp(data1), data = data1)#, colour = ('Absenteeism time in hours'))
autoplot(prcomp(data), data = data) #, colour = 'Absenteeism time in hours')
data1.pca <- prcomp(data1,
center = TRUE,
scale. = TRUE)
data1.pca
plot(data1.pca,type="l")
summary(data1.pca)
data1 = data
str(data1)
data1.pca <- prcomp(data1,
center = TRUE,
scale. = TRUE)
rm(data1)
rm(data1.pca)
#Converting factor variable
data$`Work load Average/day` = as.numeric(sub(",", "", data$`Work load Average/day`, fixed = TRUE))
data.pca <- prcomp(data1, center = TRUE, scale. = TRUE)
data.pca <- prcomp(data, center = TRUE, scale. = TRUE)
data.pca <- prcomp(data, center = TRUE, scale. = TRUE)
plot(data1.pca,type="l")
plot(data.pca,type="l")
summary(data.pca)
plot(cumsum(data.pca),type="l")
autoplot(prcomp(data), data = data) #, colour = 'Absenteeism time in hours')
autoplot(prcomp(data), data = data) , colour = 'Absenteeism time in hours')
autoplot(prcomp(data), data = data , colour = 'Absenteeism time in hours')
autoplot(prcomp(data), data = data , colour = "'Absenteeism time in hours'")
autoplot(prcomp(data), data = data , colour = "Absenteeism time in hours")
autoplot(prcomp(data), data = data , colour = '"Absenteeism time in hours"')
autoplot(prcomp(data), data = data , colour = 'ID')
target = 'Absenteeism time in hours'
autoplot(prcomp(data), data = data , colour = target)
target = "'Absenteeism time in hours'"
autoplot(prcomp(data), data = data , colour = target)
ggbiplot(data.pca, labels=rownames(data))
ggbiplot(data.pca)
summary(data.pca)
plot(data.pca,type="l")
#Box-Plot for data
boxplot(data[,c("ID", "Reason for absence","Month of absence","Day of the week","Seasons","Transportation expense","Distance from Residence to Work")])
boxplot(data[,c("Service time", "Age","Work load Average/day","Hit target","Disciplinary failure" ,"Education" ,"Son")])
boxplot(data[,c("Social drinker","Social smoker","Pet", "Weight", "Height", "Body mass index","Absenteeism time in hours")])
data_tmp = data
boxplot.stats(data_tmp[,"Age"]
boxplot.stats(data_tmp[,"Age"])
boxplot(data[,c("Service time", "Age","Work load Average/day","Hit target","Disciplinary failure" ,"Education" ,"Son")])
[data_tmp[,"Age"] %in% boxplot.stats(data_tmp[,"Age"])$out]
data_tmp[,"Age"] %in% boxplot.stats(data_tmp[,"Age"])$out
data_tmp = data
for( i in num_vars)
{
val = data_tmp[,i][data_tmp[,i] %in% boxplot.stats(data_tmp[,i])$out] #Finding outliers from boxplot
data_tmp[,i][data_tmp[,i] %in% val] = NA
}
data_tmp = knnImputation(data_tmp,k=3)
data = data_tmp
#Box-Plot for data
boxplot(data[,c("ID", "Reason for absence","Month of absence","Day of the week","Seasons","Transportation expense","Distance from Residence to Work")])
boxplot(data[,c("Service time", "Age","Work load Average/day","Hit target","Disciplinary failure" ,"Education" ,"Son")])
boxplot(data[,c("Social drinker","Social smoker","Pet", "Weight", "Height", "Body mass index","Absenteeism time in hours")])
cat_vars
install.packages("dummies")
library(dummies)
> data1 <- dummy.data.frame(data, names = cat_vars , sep = ".")
> data1 = dummy.data.frame(data, names = cat_vars , sep = ".")
data1 = dummy.data.frame(data, names = cat_vars , sep = ".")
View(data1)
View(data1)
data1 = dummy.data.frame(data, names = cat_vars , sep = ".", all = FALSE)
View(data1)
View(data1)
names(data1)
install.packages("fastDummies")
library(fastDummies)
data1 = data
data1 = fastDummies::dummy_cols(data, select_columns = cat_vars, remove_first_dummy = TRUE)
View(data1)
knitr::kable(data)
install.packages("knitr")
library(knitr)
knitr::kable(data1)
str(data1)
data1 = fastDummies::dummy_cols(data, select_columns = cat_vars, remove_first_dummy = TRUE)
str(data1)
#Deleting the columns for which dummies are created
data1 = subset(data, select = -cat_vars)
cat_vars
c(seasons)
#Deleting the columns for which dummies are created
data1 = subset(data, select = -c(cat_vars))
#Deleting the columns for which dummies are created
data1 = subset(data, select = -c("ID","Reason for absence","Month of absence","Day of the week","Seasons", "Disciplinary failure", "Education","Son", "Social drinker", "Social smoker","Pet"))
data1 = subset(data, select = -c(ID)#,"Reason for absence","Month of absence","Day of the week","Seasons", "Disciplinary failure", "Education","Son", "Social drinker", "Social smoker","Pet"))
data1 = subset(data, select = -c(ID))#,"Reason for absence","Month of absence","Day of the week","Seasons", "Disciplinary failure", "Education","Son", "Social drinker", "Social smoker","Pet"))
data1 = subset(data, select = -c(ID))#,"Reason for absence","Month of absence","Day of the week","Seasons", "Disciplinary failure", "Education","Son", "Social drinker", "Social smoker","Pet"))
View(data1)
data1["Seasons"] = NULL
data1 = data
for(in in cat_vars)
{
data1[i] = NULL
}
for(i in cat_vars)
{
data1[i] = NULL
}
data_tmp = fastDummies::dummy_cols(data_tmp, select_columns = cat_vars, remove_first_dummy = TRUE)
View(data_tmp)
knitr::kable(data1)
View(data_tmp)
for(i in cat_vars)
{
data_tmp[i] = NULL
}
View(data_tmp)
rm(data1)
data_old = data
data = data_tmp
for( i in num_vars)
{
data_tmp[i] = (data_tmp[i] - min(data_tmp[i]))/(max(data_tmp[i]) - min(data_tmp[i]))
}
View(data_tmp)
View(data_tmp)
data = data_tmp
correlationMatrix = cor(data_tmp)
correlationMatrix
#Finding Attributes that are highly correlated
highlyCorrelated = findCorrelation(correlationMatrix, cutoff = 0.5)
install.packages("mlbench")
library(mlbench)
#Finding Attributes that are highly correlated
highlyCorrelated = findCorrelation(correlationMatrix, cutoff = 0.5)
#install.packages("mlbench")
install.packages("caret")
library(caret)
#Finding Attributes that are highly correlated
highlyCorrelated = findCorrelation(correlationMatrix, cutoff = 0.5)
print(highlyCorrelated)
#Finding Attributes that are highly correlated
highlyCorrelated = findCorrelation(correlationMatrix, cutoff = 0.75)
print(highlyCorrelated)
ggcorrplot(correlationMatrix)
library(ggcorrplot)
ggcorrplot(correlationMatrix)
library(corrgram)
names(data[,9])
View(data)
View(data)
(data[,9])
#Finding Attributes that are highly correlated
highlyCorrelated = findCorrelation(correlationMatrix, cutoff = 0.8)
print(highlyCorrelated)
library(corrgram)
library(corrgram)
install.packages("corrgram")
library(corrgram)
corrgram(data[,num_vars] , order =F, upper.panel = panel.pie , text.panel = panel.txt , main = "Correlation Plot")
correlationMatrix = cor(data[,num_vars])
ggcorrplot(correlationMatrix)
print(correlationMatrix)
#Finding Attributes that are highly correlated
highlyCorrelated = findCorrelation(correlationMatrix, cutoff = 0.8)
print(highlyCorrelated)
##Weight and body mass index are highly correlated. Removing one of the feature.
data$Weight = NULL;
#Splitting the data into train and test
set.seed(100)
trainIndex = sample.split(Y = data$`Absenteeism time in hours`, SplitRatio = 0.8)
#Splitting the data into train and test
library(caTools)
set.seed(100)
trainIndex = sample.split(Y = data$`Absenteeism time in hours`, SplitRatio = 0.8)
train = data[trainIndex,]
test = data[!trainIndex,]
X_train = subset(train,select = -c(`Absenteeism time in hours`))
X_test = subset(test,select = -c(`Absenteeism time in hours`))
y_test = subset(test,select = c(`Absenteeism time in hours`))
principal_comp = prcomp(X_train)
####### Dimensionality Reduction using PCA
#Calculating principal components
principal_comp = prcomp(X_train)
#Compute standard deviation of each principal componentc
std_dev = principal_comp$sdev
#Compute variance
pr_var = std_dev^2
#Proportion of variance explained
prop_var = pr_var/sum(pr_var)
#cdf plot for principle components
plot(cumsum(prop_var), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
#Add a training set with principal components
X_train.data = data.frame( prin_comp$x)
#Add a training set with principal components
X_train.data = data.frame( principal_comp$x)
principal_comp$x
#Add a training set with principal components
X_train.data = data.frame(principal_comp$x)
# From the above plot selecting 45 components since it explains almost 95+ % data variance
X_train.data =X_train.data[,1:45]
#Transform test into PCA
X_test.data = predict(principal_comp, newdata = X_test)
X_test.data = as.data.frame(X_test.data)
#select the first 45 components
X_test.data=X_test.data[,1:45]
paste(y_train$Absenteeism_time_in_hours)
###################################Splitting the data into train and test##########################
library(caTools)
set.seed(100)
trainIndex = sample.split(Y = data$`Absenteeism time in hours`, SplitRatio = 0.8)
train = data[trainIndex,]
test = data[!trainIndex,]
X_train = subset(train,select = -c(`Absenteeism time in hours`))
y_train = subset(train,select = c(`Absenteeism time in hours`))
X_test = subset(test,select = -c(`Absenteeism time in hours`))
y_test = subset(test,select = c(`Absenteeism time in hours`))
####### Dimensionality Reduction using PCA
#Calculating principal components
principal_comp = prcomp(X_train)
#Compute standard deviation of each principal componentc
std_dev = principal_comp$sdev
#Compute variance
pr_var = std_dev^2
#Proportion of variance explained
prop_var = pr_var/sum(pr_var)
#cdf plot for principle components
plot(cumsum(prop_var), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
#Add a training set with principal components
X_train.data = data.frame(principal_comp$x)
# From the above plot selecting 45 components since it explains almost 95+ % data variance
X_train.data =X_train.data[,1:45]
#Transform test into PCA
X_test.data = predict(principal_comp, newdata = X_test)
X_test.data = as.data.frame(X_test.data)
#select the first 45 components
X_test.data=X_test.data[,1:45]
paste(y_train$Absenteeism_time_in_hours)
X_train.data$Absenteeism_time_in_hours = paste(y_train$Absenteeism_time_in_hours)
X_test.data$Absenteeism_time_in_hours = paste(y_test$Absenteeism_time_in_hours)
View(y_train)
View(y_train)
X_train.data$`Absenteeism time in hours` = paste(y_train$`Absenteeism time in hours`)
X_test.data$`Absenteeism time in hours` = paste(y_test$`Absenteeism time in hours`)
View(X_train.data)
View(X_train.data)
Linear_mod = lm(`Absenteeism time in hours`~.,data = X_train.data)
pred_LR_test = predict(Linear_mod,X_test.data)
(postResample(pred = pred_LR_test, obs =y_test$Absenteeism_time_in_hours))
install.packages("e1071")
library(e1071)
# Results
print(postResample(pred = pred_LR_test, obs =y_test$Absenteeism_time_in_hours))
# Results
print(postResample(pred = pred_LR_test, obs =y_test$`Absenteeism time in hours`))
install.packages("glmnet")
library(glmnet)
set.seed(100)
dim(X_train.data)
X_train.data[,-46]
View(X_train.data)
View(X_train.data)
ridge = glmnet(X_train.data[-46],X_train.data$`Absenteeism time in hours`,alpha = 0, lambda = lambda )
seq(10, -2, length = 100)
X_train.data[,46]
ridge = glmnet(X_train.data[,-46],X_train.data[,46],alpha = 0)
ridge = glmnet(X_train.data[,-46],X_train.data$`Absenteeism time in hours`,alpha = 0)
cv.glmnet(`Absenteeism time in hours`~., data=X_train.data[,-46])
cv.glmnet(X_train.data[,-46],X_train.data[,46])
cv.glmnet(as.matrix(X_train.data[,-46]),X_train.data[,46])
cv.glmnet(as.matrix(X_train.data[,-46]),as.matrix(X_train.data[,46])
cv.glmnet(as.matrix(X_train.data[,-46]),as.matrix(X_train.data[,46]))
ridge = glmnet(as.matrix(X_train.data[,-46]),as.matrix(X_train.data[,46]), alpha = 0)
pred_ridge_test = predict(ridge,X_test.data)
pred_ridge_test = predict(ridge,newx = X_test.data)
pred_ridge_test = predict(ridge,newx = as.matrix(X_test.data))
View(X_test.data)
sum(is.na(X_test.data))
#find the best lambda from our list via cross-validation
cv.out <- cv.glmnet(as.matrix(X_train.data[,-46]),as.matrix(X_train.data[,46]), alpha = 0)
#find the best lambda from our list via cross-validation
cv.out = cv.glmnet(as.matrix(X_train.data[,-46]),as.matrix(X_train.data[,46]), alpha = 0)
ridge = glmnet(as.matrix(X_train.data[,-46]),as.matrix(X_train.data[,46]),family="gaussian" alpha = 0, lambda = 0.001)
ridge = glmnet(as.matrix(X_train.data[,-46]),as.matrix(X_train.data[,46]),family="gaussian", alpha = 0, lambda = 0.001)
summary(ridge)
pred_ridge_test = predict(ridge,as.matrix(X_test.data),type="link")
ridge = glmnet(data.matrix(X_train.data[,-46]),data.matrix(X_train.data[,46]),family="gaussian", alpha = 0, lambda = 0.001)
pred_ridge_test = predict(ridge,data.matrix(X_test.data),type="link")
pred_ridge_test = predict(object = ridge, newx =  as(X_test.data, "dgCMatrix"), type = "response")
ridge = glmnet(as(X_train.data[,-46],"dgCMatrix"),data.matrix(X_train.data[,46]),family="gaussian", alpha = 0, lambda = 0.001)
ridge = glmnet(as(as.matrix(X_train.data[,-46]),"dgCMatrix"),data.matrix(X_train.data[,46]),family="gaussian", alpha = 0, lambda = 0.001)
pred_ridge_test = predict(ridge,as.matrix(X_test.data),type="link")
x = data.matrix(X_train.data[,-46])
y = data.matrix(X_train.data[,46])
ridge = glmnet(x, y, family="gaussian", alpha = 0, lambda = 0.001)
# make predictions
pred_ridge_test = predict(ridge,x,type="link")
x_test = data.matrix(X_test.data[,-46])
# make predictions
pred_ridge_test = predict(ridge,x_test,type="link")
#Summarize the fit
summary(fit)
#Model Results
print(postResample(pred = pred_ridge_test, obs = y_test$`Absenteeism time in hours`))
mse <- mean((y - pred_ridge_test)^2)
mse <- mean((y_test - pred_ridge_test)^2)
mean((y_test$`Absenteeism time in hours` - pred_ridge_test)^2)
sqrt(mean((y_test$`Absenteeism time in hours` - pred_ridge_test)^2))
#Model Results
print(postResample(pred = pred_ridge_test, obs = y_test$`Absenteeism time in hours`))
#Summarize the fit
summary(ridge)
View(ridge)
View(ridge)
View(ridge)
ridge = glmnet(x, y, family="gaussian", alpha = 0, lambda = lambdas_to_try)
lambdas_to_try <- 10^seq(-3, 5, length.out = 100)
ridge = glmnet(x, y, family="gaussian", alpha = 0, lambda = lambdas_to_try)
plot(ridge)
ridge = glmnet(x, y, family="gaussian", alpha = 0, lambda = lambdas_to_try, nfolds =10)
ridge_cv = cv.glmnet(x, y, family="gaussian", alpha = 0, lambda = lambdas_to_try,  standardize = TRUE, nfolds = 10)
seq(lambdas_to_try)
for( lambda in c(0.001,0.01,1,2,5,10,20))
{
ridge = glmnet(x, y, family="gaussian", alpha = 0, lambda = lambda)
# make predictions
pred_ridge_test = predict(ridge,x_test,type="link")
#Model Results
print(postResample(pred = pred_ridge_test, obs = y_test$`Absenteeism time in hours`))
}
for( lambda in c(0.000001,0.0001,0.001,2,5,10,20))
{
ridge = glmnet(x, y, family="gaussian", alpha = 0, lambda = lambda)
# make predictions
pred_ridge_test = predict(ridge,x_test,type="link")
#Model Results
print(postResample(pred = pred_ridge_test, obs = y_test$`Absenteeism time in hours`))
}
ridge = glmnet(x, y, family="gaussian", alpha = 0, lambda = 0.001)
plot(ridge)
#Summarize the fit
summary(ridge)
# make predictions
pred_ridge_test = predict(ridge,x_test,type="link")
#Model Results
print(postResample(pred = pred_ridge_test, obs = y_test$`Absenteeism time in hours`))
View(ridge)
#########################   Lasso Regression  #########################
install.packages("lars")
library(lars)
set.seed(100)
x = data.matrix(X_train.data[,-46])
y = data.matrix(X_train.data[,46])
x_test = data.matrix(X_test.data[,-46])
#Developing LASSO Model
lasso = lars(x,y,type="lasso")
#Developing LASSO Model
lasso = lars(x,y,type="lasso")
cv.ridge = cv.glmnet(x, y, family="gaussian", alpha = 0, lambda = 0.001)
cv.ridge = cv.glmnet(x, y, family="gaussian")
plot(ridge)
#Developing LASSO Model
lasso = glmnet(x, y, alpha = 1, lambda = 0.001)
#Summarize the fit
summary(lasso)
# make predictions
pred_ridge_test = predict(lasso,x_test,type="link")
#Model Results
print(postResample(pred = pred_ridge_test, obs = y_test$`Absenteeism time in hours`))
for( lambda in c(0.000001,0.0001,0.001,2,5,10,20))
{
#Developing ridge regression model
lasso = glmnet(x, y, alpha = 1, lambda = lambda)
# make predictions
pred_lasso_test = predict(lasso,x_test,type="link")
#Model Results
print(postResample(pred = pred_lasso_test, obs = y_test$`Absenteeism time in hours`))
}
autoplot(prcomp(data), data = data, colour = ('Absenteeism time in hours'))
